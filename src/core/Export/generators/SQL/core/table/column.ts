import { VariableName } from "../../../../core/names";
import { SQLDatatype, SQLNull } from "../sql-types";

export class SQLColumn {
  readonly autoGenerated: boolean;
  private _name: VariableName;
  readonly values: SQLDatatype[];
  private _datatype: SQLDatatype;
  private _isKey: boolean;
  private _isNull: boolean;

  constructor(
    name: VariableName,
    datatype: SQLDatatype,
    autoGenerated: boolean,
  ) {
    this._name = name;
    this.values = [datatype];
    this._isKey = false;
    this._isNull = false;
    this._datatype = datatype;
    this.autoGenerated = autoGenerated;

    if (datatype instanceof SQLNull) {
      this._isNull = false;
    }
  }

  ref() {
    return this.datatype().ref();
  }

  length(): number {
    return this.values.length;
  }

  get(index: number): SQLDatatype {
    return this.values[index];
  }

  datatype() {
    return this._datatype;
  }

  equal(other: VariableName) {
    return this._name.equal(other);
  }

  setIsKey(v: boolean): void {
    this._isKey = v;
  }

  setIsNull(value: boolean) {
    this._isNull = value;
  }

  definition(): string {
    return `${this._datatype.definition()}`;
  }

  isNull() {
    return this._isNull;
  }

  isKey() {
    return this._isKey;
  }

  name() {
    return this._name.value("snake");
  }

  setValue(value: SQLDatatype): void {
    this.values.push(value);

    if (value.isGreaterThan(this._datatype)) {
      this._datatype = value;
    }

    if (value instanceof SQLNull) {
      this._isNull = false;
    }
  }

  similar(other: SQLColumn): boolean {
    return other._datatype.isSimilar(this._datatype);
  }
}
