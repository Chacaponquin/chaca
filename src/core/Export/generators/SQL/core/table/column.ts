import { ColumnName } from "../generators/names";
import { SQLDatatype, SQLNull } from "../sql-types";

interface Props {
  isKey: boolean;
  isNull: boolean;
  name: ColumnName;
  datatype: SQLDatatype;
  autoGenerated: boolean;
}

export class SQLColumn {
  readonly autoGenerated: boolean;
  readonly _name: ColumnName;
  private _value: SQLDatatype;
  private _isKey: boolean;
  private _isNull: boolean;
  private _unique: boolean;

  constructor({ autoGenerated, datatype, isKey, isNull, name }: Props) {
    this._name = name;
    this._value = datatype;
    this._isKey = isKey;
    this._isNull = isNull;
    this._unique = false;
    this.autoGenerated = autoGenerated;

    if (datatype instanceof SQLNull) {
      this._isNull = false;
    }
  }

  value() {
    return this._value;
  }

  unique() {
    return this._unique;
  }

  ref() {
    return this.value().ref();
  }

  equal(other: ColumnName) {
    return this._name.equal(other);
  }

  setIsKey(v: boolean): void {
    this._isKey = v;
  }

  setIsNull(value: boolean) {
    this._isNull = value;
  }

  definition(): string {
    return `${this.value().definition()}`;
  }

  isNull() {
    return this._isNull;
  }

  isKey() {
    return this._isKey;
  }

  name() {
    return this._name.value("snake");
  }

  setValue(value: SQLDatatype): void {
    this._value = value;

    if (value.isGreaterThan(this.value())) {
      this._value = value;
    }

    if (value instanceof SQLNull) {
      this._isNull = false;
    }
  }

  similar(other: SQLColumn): boolean {
    return other._value.isSimilar(this._value);
  }
}
