import { ChacaError } from "../../../../../../errors";
import { ChacaUtils } from "../../../../../utils";
import { VariableName } from "../../../../core/names";
import { Parent } from "../../../../core/parent";
import { SQLDatatype, SQLSerial } from "../sql-types";
import { SQLColumn } from "./column";

export class SQLTable {
  readonly parent: Parent;
  private _name: VariableName;
  readonly columns: SQLColumn[];
  readonly autoGenerated: boolean;
  private actualSerial: number;

  constructor(
    private readonly utils: ChacaUtils,
    name: VariableName,
    parent: Parent,
    autoGenerated: boolean,
  ) {
    this.columns = [];
    this.parent = parent;
    this._name = name;
    this.autoGenerated = autoGenerated;

    // add serial
    const serialName = new VariableName(utils, { name: "id" });
    const columnId = new SQLColumn(serialName, new SQLSerial(1), true);
    this.actualSerial = 1;
    columnId.setIsKey(true);

    this.columns.push(columnId);
  }

  find(search: string): SQLColumn | null {
    const name = new VariableName(this.utils, { name: search });
    const found = this.notAutoGeneratedColumns().find((c) => c.equal(name));

    return found ? found : null;
  }

  equal(name: VariableName): boolean {
    return this._name.equal(name);
  }

  name() {
    return this._name.value("snake");
  }

  lastKeys(): SQLDatatype[] {
    const keys = this.columns
      .filter((c) => c.isKey())
      .map((c) => c.datatype().refValue());

    keys.forEach((k) => {
      k.setRef({ table: this, column: this.columns[0] });
    });

    return keys;
  }

  pushId() {
    this.actualSerial++;

    const columnId = this.columns[0];
    columnId.setValue(new SQLSerial(this.actualSerial));
  }

  add(column: SQLColumn) {
    this.columns.push(column);
  }

  notAutoGeneratedColumns(): SQLColumn[] {
    return this.columns.filter((c) => !c.autoGenerated);
  }

  merge(other: SQLTable): void {
    for (const column of other.notAutoGeneratedColumns()) {
      const found = this.notAutoGeneratedColumns().find(
        (f) => f.name() === column.name(),
      );

      if (found) {
        const similar = found.similar(column);

        if (similar) {
          for (const v of column.values) {
            found.setValue(v);
          }
        } else {
          throw new ChacaError(`hola objeto`);
        }
      } else {
        this.columns.push(column);
      }
    }

    this.pushId();
  }

  iterate(func: (values: SQLDatatype[]) => void): void {
    if (this.columns.length > 0) {
      for (let i = 0; i < this.columns[0].length(); i++) {
        const values = [] as SQLDatatype[];

        for (const column of this.columns) {
          values.push(column.get(i));
        }

        func(values);
      }
    }
  }
}
