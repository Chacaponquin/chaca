import { ChacaUtils } from "../../../../../utils";
import { ColumnName, TableName } from "../generators/names";
import { SQLDatatype, SQLSerial } from "../sql-types";
import { SQLColumn } from "./column";
import { SQLRow } from "./row";
import { RowColumn } from "./row-column";

export class SQLTable {
  readonly _name: TableName;
  readonly rows: SQLRow[];
  readonly autoGenerated: boolean;
  readonly columns: SQLColumn[];
  private readonly utils: ChacaUtils;

  private readonly serialColumn: SQLColumn;

  constructor(utils: ChacaUtils, name: TableName, autoGenerated: boolean) {
    this.utils = utils;
    this.rows = [];
    this._name = name;
    this.autoGenerated = autoGenerated;
    this.columns = [];

    this.serialColumn = new SQLColumn({
      isKey: true,
      isNull: false,
      autoGenerated: true,
      name: new ColumnName(utils, "id"),
      datatype: new SQLSerial(0),
    });

    this.columns.push(this.serialColumn);
  }

  find(search: string): SQLColumn | null {
    const name = new ColumnName(this.utils, search);
    const found = this.columns
      .filter((c) => !c.autoGenerated)
      .find((c) => c.equal(name));

    return found ? found : null;
  }

  length() {
    return this.rows.length;
  }

  equal(name: TableName): boolean {
    return this._name.equal(name);
  }

  name() {
    return this._name.value("snake");
  }

  lastKeys(): RowColumn[] {
    const lastRow = this.rows.at(-1);

    if (lastRow) {
      const keys = this.columns.filter((c) => c.isKey());

      return lastRow.columns.filter((c) => keys.includes(c.column()));
    }

    return [];
  }

  addColumn(column: SQLColumn): SQLColumn {
    const found = this.columns
      .filter((c) => !c.autoGenerated)
      .find((c) => c.equal(column._name));

    if (!found) {
      this.columns.push(column);

      return column;
    } else {
      found.setDatatype(column.datatype());

      return found;
    }
  }

  addRow(row: SQLRow) {
    // add serial
    const serial = new RowColumn({
      column: this.serialColumn,
      value: new SQLSerial(this.length() + 1),
    });

    row.add(serial);

    this.rows.push(row);
  }

  iterate(func: (values: SQLDatatype[]) => void): void {
    this.rows.map((r) => func(r.values()));
  }
}
