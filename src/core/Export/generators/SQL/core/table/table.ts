import { ChacaUtils } from "../../../../../utils";
import { VariableName } from "../../../../core/names";
import { TableName } from "../generators/names";
import { SQLDatatype, SQLSerial } from "../sql-types";
import { SQLColumn } from "./column";
import { SQLRow } from "./row";

export class SQLTable {
  readonly _name: TableName;
  rows: SQLRow[];
  readonly autoGenerated: boolean;
  private readonly utils: ChacaUtils;

  constructor(utils: ChacaUtils, name: TableName, autoGenerated: boolean) {
    this.utils = utils;
    this.rows = [];
    this._name = name;
    this.autoGenerated = autoGenerated;
  }

  find(search: string): SQLColumn | null {
    const name = new VariableName(this.utils, { name: search });
    const found = this.rows[0]
      .notAutoGeneratedColumns()
      .find((c) => c.equal(name));

    return found ? found : null;
  }

  length() {
    return this.rows.length;
  }

  columns(): SQLColumn[] {
    return this.rows[0].columns;
  }

  equal(name: TableName): boolean {
    return this._name.equal(name);
  }

  name() {
    return this._name.value("snake");
  }

  lastKeys(): SQLColumn[] {
    const lastRow = this.rows.at(-1);

    if (lastRow) {
      return lastRow.keys();
    }

    return [];
  }

  add(row: SQLRow) {
    // add serial
    const serialName = new VariableName(this.utils, { name: "id" });
    const columnId = new SQLColumn({
      name: serialName,
      datatype: new SQLSerial(this.length() + 1),
      autoGenerated: true,
      isKey: true,
      isNull: false,
    });

    row.add(columnId);

    this.rows = [...this.rows, row];
  }

  merge(other: SQLTable): void {
    /* console.log({
      name: this.name(),
      columns: other.rows.map((r) => r.columns.map((c) => c.value().string())),
    }); */
    /*for (const row of other.rows) {
      this.add(row);
    }*/
  }

  iterate(func: (values: SQLDatatype[]) => void): void {
    this.rows.map((r) => func(r.values()));
  }
}
