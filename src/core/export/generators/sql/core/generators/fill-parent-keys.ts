import { ChacaUtils } from "../../../../../utils";
import { SQLColumn } from "../table/column";
import { SQLRow } from "../table/row";
import { RowColumn } from "../table/row-column";
import { SQLTable } from "../table/table";
import { ColumnName } from "./names";

interface Props {
  parent: SQLTable;
  nested: boolean;
  table: SQLTable;
  row: SQLRow;
}

export class FillParentKeys {
  constructor(private readonly utils: ChacaUtils) {}

  execute({ parent, nested, table, row }: Props): void {
    const keys = parent.lastKeys();
    for (let i = 0; i < keys.length && nested; i++) {
      const key = keys[i];

      const name = new ColumnName(
        this.utils,
        `${parent.name()}_${key.column().name()}`,
      );

      const column = table.addColumn(
        new SQLColumn({
          isKey: false,
          isNull: false,
          name: name,
          autoGenerated: false,
          isUnique: false,
        }),
        false,
      );

      column.setRef({ table: parent, column: key.column() });

      row.add(
        new RowColumn(table, {
          column: column,
          value: key.refValue(),
        }),
      );
    }
  }
}
